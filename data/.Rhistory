print("Between :",prev, "and", i, "The slope is:", slope)
prev <- i
}
prev = 0
for (i in prems){
slope <- (prev - i) / .5
print(prev)
print(i)
print("slope:")
print(slope)
prev <- i
}
prev = 0
for (i in prems){
slope <- (i-prev) / .5
print(prev)
print(i)
print("slope:")
print(slope)
prev <- i
}
return(exp(-r*T)*avePayoff) }
binomPut <- function(K,n=4,T=1,S0=100,r=0.04,u=1.03,d=100/103) {
h <- T/n
q <- (exp(r*h)-d)/(u-d)
Sbin <- S0*d^n*(u/d)^(0:n)
qbin <- dbinom(0:n,n,q)
Payoff <- pmax(Sbin-K,0)
avePayoff <- sum(qbin*Payoff)
return(exp(-r*T)*avePayoff)
}
price = binomPut(S0=100,K=87.5,r=0.04,sigma=.18,TIME=.5,N=20)
binomPut <- function(K,n=4,TIME=1,S0=100,r=0.04,sigma=0.2) {
h <- TIME/n
u <- exp(h*(r-delta)+sigma*(h)^.5)
d <- exp(h*(r-delta)-sigma*(h)^.5)
q <- (exp(r*h)-d)/(u-d)
Sbin <- S0*d^n*(u/d)^(0:n)
qbin <- dbinom(0:n,n,q)
Payoff <- pmax(Sbin-K,0)
avePayoff <- sum(qbin*Payoff)
return(exp(-r*T)*avePayoff)
}
price = binomPut(S0=100,K=87.5,r=0.04,sigma=.18,TIME=.5,N=20)
price = binomPut(S0=100,K=87.5,r=0.04,sigma=.18,TIME=.5,n=20)
price = binomPut(S0=100,K=87.5,r=0.04,sigma=.18,TIME=.5,n=20)
binomPut <- function(K,n=4,TIME=1,S0=100,r=0.04,sigma=0.2) {
h <- TIME/n
u <- exp(h*(r)+sigma*(h)^.5)
d <- exp(h*(r)-sigma*(h)^.5)
q <- (exp(r*h)-d)/(u-d)
Sbin <- S0*d^n*(u/d)^(0:n)
qbin <- dbinom(0:n,n,q)
Payoff <- pmax(Sbin-K,0)
avePayoff <- sum(qbin*Payoff)
return(exp(-r*T)*avePayoff)
}
price = binomPut(S0=100,K=87.5,r=0.04,sigma=.18,TIME=.5,n=20)
price
prems <- list()
for (i in seq(87,113, .5)){
value <- binomPut(S0=100,K=i,r=0.04,sigma=.18,TIME=.5,n=20)
prems <- append(prems,value)
}
plot(seq(87,113, .5), prems)
slopes = list()
slopes = data.frame(colnames=c("1","2","slope"))
slopes = data.frame(1,2,"slopes")
slopes = data.frame(1,2,"slopes")
prev = 0
for (i in prems){
slope <- (i-prev) / .5
slopes <- rbind(slopes, list(prev, i, slope))
"""print(prev)
print(i)
print()
print(slope)
prev <- i"""
slopes = data.frame(1,2,"slopes")
prev = 0
for (i in prems){
slope <- (i-prev) / .5
slopes <- rbind(slopes, list(prev, i, slope))
}
print(slopes)
slopes = data.frame(1,2,"slopes")
prev = 0
for (i in prems){
slope <- (i-prev) / .5
slopes <- rbind(slopes, list(prev, i, slope))
prev = i
}
print(slopes)
plot(slopes)
slopes = data.frame(1,2,"slopes")
prev = 0
for (i in prems){
slope <- (i-prev) / .5
slopes <- rbind(slopes, list(prev, i, slope))
prev = i
}
print(slopes)
plot(seq(87,113, .5),slopes$slope)
plot(seq(87,113, .5),slopes$X.slopes.)
print(slopes)
plot(seq(87,113, .5),slopes$X.slopes.)
plot(seq(87,113, .5),slopes$X.slopes.[2:])
print(slopes)
plot(seq(87,113, .5),slopes$X.slopes.[2:])
print(slopes)
prems <- list()
for (i in seq(87,113, .5)){
value <- binomPut(S0=100,K=i,r=0.04,sigma=.18,TIME=.5,n=20)
prems <- append(prems,value)
}
plot(seq(87,113, .5), prems)
binTree <- function(S=49, K=50,N=10,r=0.05,delta=0,sigma=0.2, TIME=1) {
h <- TIME/N
u <- exp(h*(r-delta)+sigma*(h)^.5)
d <- exp(h*(r-delta)-sigma*(h)^.5)
disc <- exp(-r*h)
q <- (exp( (r-delta)*h)-d)/(u-d)
V <- array(0, dim=c(N+1,N+1)) # matrix for storing all the option premia at each node
Del <- B <- array(0, dim=c(N+1,N+1))
for (i in 0:(N)) { # terminal payoff
finalS <- S*(u)^i*(d)^(N-i)
V[N+1,i+1] <- max( finalS-K, 0) # Call payoff
}
V_rn=V
for (j in (N):1) { # column in the tree
for (i in 0:(j-1)) { # i counts number of up-moves in the j-th column
curS = S * u^(i) * d^(j-1-i)
B[j,i+1] = disc*( u*V[j+1,i+1] - d*V[j+1,i+2] )/(u - d)
Del[j,i+1] = exp(-delta*h)*( V[j+1,i+2] - V[j+1,i+1] )/(curS * u - curS * d)
V[j,i+1] = Del[j,i+1]*curS + B[j,i+1]
V_rn[j,i+1] <- disc*( q*V_rn[j+1,i+2] + (1-q)*V_rn[j+1,i+1] )
}
}
Delta0 <- exp(-delta*h)*(V[2,2]-V[2,1])/(S*(u-d)) # V[2,2] = C_u, V[2,1]=C_d
return (list(premia = V,Delta=Del,Bank=B) )
}
binomPut <- function(K,n=4,TIME=1,S0=100,r=0.04,sigma=0.2) {
h <- TIME/n
u <- exp(h*(r)+sigma*(h)^.5)
d <- exp(h*(r)-sigma*(h)^.5)
q <- (exp(r*h)-d)/(u-d)
Sbin <- S0*d^n*(u/d)^(0:n)
qbin <- dbinom(0:n,n,q)
Payoff <- pmax(Sbin-K,0)
avePayoff <- sum(qbin*Payoff)
return(exp(-r*h)*avePayoff)
}
price = binomPut(S0=100,K=87.5,r=0.04,sigma=.18,TIME=.5,n=20)
price
li = list('java','python')
li2 <- append(li,'r')
print(li2)
slopes = data.frame(1,2,"slopes")
prev = 0
for (i in prems){
slope <- (i-prev) / .5
slopes <- rbind(slopes, list(prev, i, slope))
prev = i
}
print(slopes)
binTree <- function(S=49, K=50,N=10,r=0.05,delta=0,sigma=0.2, TIME=1) {
h <- TIME/N
u <- exp(h*(r-delta)+sigma*(h)^.5)
d <- exp(h*(r-delta)-sigma*(h)^.5)
disc <- exp(-r*h)
q <- (exp( (r-delta)*h)-d)/(u-d)
V <- array(0, dim=c(N+1,N+1)) # matrix for storing all the option premia at each node
Del <- B <- array(0, dim=c(N+1,N+1))
for (i in 0:(N)) { # terminal payoff
finalS <- S*(u)^i*(d)^(N-i)
V[N+1,i+1] <- max( finalS-K, 0) # Call payoff
}
V_rn=V
for (j in (N):1) { # column in the tree
for (i in 0:(j-1)) { # i counts number of up-moves in the j-th column
curS = S * u^(i) * d^(j-1-i)
B[j,i+1] = disc*( u*V[j+1,i+1] - d*V[j+1,i+2] )/(u - d)
Del[j,i+1] = exp(-delta*h)*( V[j+1,i+2] - V[j+1,i+1] )/(curS * u - curS * d)
V[j,i+1] = Del[j,i+1]*curS + B[j,i+1]
V_rn[j,i+1] <- disc*( q*V_rn[j+1,i+2] + (1-q)*V_rn[j+1,i+1] )
}
}
Delta0 <- exp(-delta*h)*(V[2,2]-V[2,1])/(S*(u-d)) # V[2,2] = C_u, V[2,1]=C_d
return (list(premia = V,Delta=Del,Bank=B) )
}
binomPut <- function(K,n=4,TIME=1,S0=100,r=0.04,sigma=0.2) {
h <- TIME/n
u <- exp(h*(r)+sigma*(h)^.5)
d <- exp(h*(r)-sigma*(h)^.5)
q <- (exp(r*h)-d)/(u-d)
Sbin <- S0*d^n*(u/d)^(0:n)
qbin <- dbinom(0:n,n,q)
Payoff <- pmax(K-Sbin,0)
avePayoff <- sum(qbin*Payoff)
return(exp(-r*h)*avePayoff)
}
prems <- list()
for (i in seq(87,113, .5)){
value <- binomPut(S0=100,K=i,r=0.04,sigma=.18,TIME=.5,n=20)
prems <- append(prems,value)
}
plot(seq(87,113, .5), prems)
slopes = data.frame(1,2,"slopes")
prev = 0
for (i in prems){
slope <- (i-prev) / .5
slopes <- rbind(slopes, list(prev, i, slope))
prev = i
}
print(slopes)
binomCall <- function(K,n=4,TIME=1,S0=100,r=0.04,sigma=0.2) {
h <- TIME/n
u <- exp(h*(r)+sigma*(h)^.5)
d <- exp(h*(r)-sigma*(h)^.5)
q <- (exp(r*h)-d)/(u-d)
Sbin <- S0*d^n*(u/d)^(0:n)
qbin <- dbinom(0:n,n,q)
Payoff <- pmax(Sbin-K,0)
avePayoff <- sum(qbin*Payoff)
return(exp(-r*h)*avePayoff)
}
binomCall(K=50,n=4,TIME=1,S0=50,r=0.05,sigma=0.2)
binomCall(K=50,n=4,TIME=1,S0=50,r=0.05,sigma=0.2)
binomCall(K=50,n=8,TIME=1,S0=50,r=0.05,sigma=0.2)
binomCall(K=50,n=15,TIME=1,S0=50,r=0.05,sigma=0.2)
binomCall(K=50,n=30,TIME=1,S0=50,r=0.05,sigma=0.2)
binomCall(K=50,n=100,TIME=1,S0=50,r=0.05,sigma=0.2)
binomCall(K=50,n=150,TIME=1,S0=50,r=0.05,sigma=0.2)
setwd("~/PSTAT131")
knitr::opts_chunk$set(echo = TRUE)
leukemia_data <- read_csv("leukemia_data.csv")
library(tidyverse)
library(dendextend)
install.packages("dendextend")
library(dendextend)
leukemia_data <- read_csv("leukemia_data.csv")
glimpse(leukemia_data)
leukemia_data <- read_csv("leukemia_data.csv")
head(leukemia_data)
leukemia_data %>% mutate_at(1, as.factor())
leukemia_data %>% mutate_at(1, as.factor(.))
leukemia_data %>% mutate_at(c(1), as.factor(.))
leukemia_data %>% mutate_at(Type, as.factor(.))
leukemia_data %>% mutate_at(1, as.factor(.))
mutate(leukemia_data, Type = as.factor(Type))
table(leukemia_data$Type)
pr.out <- prcomp(leukemia_data, scale=T, center=T)
pr.out <- prcomp(leukemia_data[2:], scale=T, center=T)
pr.out <- prcomp(leukemia_data[,2:], scale=T, center=T)
pr.out <- prcomp(leukemia_data[2:,], scale=T, center=T)
leukemia_data[2:,]
leukemia_data[2:]
leukemia_data[Type]
leukemia_data[2:]
leukemia_data[,-1]
pr.out <- prcomp(leukemia_data[,-1], scale=T, center=T)
pr.var=pr.out$sdevˆ2
pr.var
pr.var=pr.out$sdevˆ2
pr.var
pr.out$sdev
pr.var=(pr.out$sdev)ˆ2
pr.var=(pr.out$sdev)^2
pr.var
pve=pr.var/sum(pr.var)
pve
",
plot(pve, xlab="Principal Component",
plot(pve, xlab="Principal Component",
ylab="Proportion of Variance Explained ", ylim=c(0,1),type='b')
plot(cumsum(pve), xlab="Principal Component ",
ylab=" Cumulative Proportion of Variance Explained ", ylim=c(0,1), type='b')
cumsum(pve)
plot(cumsum(pve), xlab="Principal Component ",
ylab=" Cumulative Proportion of Variance Explained ", ylim=c(0,1), type='b')
cumsum(pve)
which_pc <- which(pve) >= 0.90
which_pc <- which(cumsum(pve) >= 0.90)[1]
(which_pc <- which(cumsum(pve) >= 0.90)[1])
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
biplot(pr.out, scale=0)
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
biplot(pr.out, scale=0)
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
biplot(pr.out, scale=0)
biplot(pr.out, scale=0, col=plot_colors)
biplot(pr.out, scale=0, col=plot_colors, labels=leukemia_data)
biplot(pr.out, scale=0, col=plot_colors, labels=leukemia_data$Type)
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
biplot(pr.out, scale=0, col=plot_colors, labels=Type)
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
biplot(pr.out, scale=0, col=plot_colors, cex=0.01)
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
biplot(pr.out, scale=0, col=plot_colors, cex=0.1)
rainbow(7)
rainbow_colors[as.factor(leukemia_data$Type)]
biplot(pr.out, scale=0, col=plot_colors, cex=0.1,)
biplot(pr.out, scale=0, col=plot_colors, cex=0.1,labels=leukemia_data$Type)
biplot.out <- biplot(pr.out, scale=0, col=plot_colors, cex=0.1)
text(biplot.out, labels=leukemia_data)
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
biplot.out <- biplot(pr.out, scale=0, col=plot_colors, cex=0.1)
text(biplot.out, labels=leukemia_data)
biplot.out <- biplot(pr.out, scale=0, cols=plot_colors, cex=0.1)
biplot.out <- biplot(pr.out, scale=0, col=plot_colors, cex=0.1)
biplot.out <- biplot(pr.out, scale=0, col=rainbow_colors, cex=0.1)
biplot.out <- plot(pr.out, scale=0, col=plot_colors, cex=0.1)
biplot.out <- biplot(pr.out, scale=0, col=rainbow_colors, cex=0.1)
?biplot
text(biplot.out$x, labels=leukemia_data)
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
?biplot
biplot.out <- biplot(pr.out, scale=0, col=rainbow_colors, cex=0.01)
text(biplot.out$x, labels=leukemia_data)
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
?biplot
biplot.out <- biplot(pr.out, scale=0, col=rainbow_colors, cex=c(.1, 1),)
text(biplot.out$x, labels=leukemia_data)
biplot.out <- biplot(pr.out, scale=0, col=rainbow_colors, cex=c(.1, 1))
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
?biplot
biplot.out <- biplot(pr.out, scale=0, col=rainbow_colors, cex=c(.01, .1))
#text(biplot.out$x, labels=leukemia_data)
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
?biplot
biplot.out <- biplot(pr.out, scale=0, col=rainbow_colors, cex=c(.001, .01))
#text(biplot.out$x, labels=leukemia_data)
rainbow_colors <- rainbow(7)
plot_colors <- c(rainbow_colors[as.factor(leukemia_data$Type)])
?biplot
biplot.out <- biplot(pr.out, scale=0, col=rainbow_colors, cex=c(.001, .01))
#text(biplot.out$x, labels=leukemia_data)
plot_colors
biplot.out <- biplot(pr.out, scale=0, col=rainbow_colors, cex=c(.001, .01))
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
pc1 <- pr.out$x[, 1]
pc2 <- pr.out$x[, 2]
pc3 <- pr.out$x[, 3]
?biplot
biplot.out <- biplot(pc1,pc2, scale=0, col=rainbow_colors, cex=c(.001, .01))
pc2
pc1
rainbow_colors <- rainbow(7)
plot_colors <- rainbow_colors[as.factor(leukemia_data$Type)]
pc1 <- pr.out$x[, 1]
pc2 <- pr.out$x[, 2]
pc3 <- pr.out$x[, 3]
?biplot
biplot.out <- biplot(pc1,pc2, scale=0, col=rainbow_colors, cex=c(.001, .01))
biplot.out <- biplot(pc1,pc2, scale=0)
leukemia_data$Type
as.factor(leukemia_data$Type)
rainbow_colors[as.factor(leukemia_data$Type)]
biplot.out <- biplot(pc1,pc2, scale=0, col=plot_colors, cex=c(.001, .01))
biplot.out <- biplot(pr.out, scale=0, col=plot_colors, cex=c(.001, .01))
c("T-ALL", "TEL-AML1","Hyperdip50")
leukemia_subset <- filter(leukemia_data, Type in c("T-ALL", "TEL-AML1","Hyperdip50"))
leukemia_subset <- filter(leukemia_data, Type == c("T-ALL", "TEL-AML1","Hyperdip50"))
leukemia_subset
pc1_loadings <- abs(pca_result$rotation[, 1])
pc1_loadings <- abs(pr.out$rotation[, 1])
sorted_genes <- names(head(sort(pc1_loadings, decreasing = TRUE), 6))
pc1_loadings <- abs(pr.out$rotation[, 1])
(sorted_genes <- names(head(sort(pc1_loadings, decreasing = TRUE), 6)))
# read in cleaned dataset
#hello
library(tidyverse)
library(ISLR)
library(glmnet)
library(tree)
library(maptree)
library(randomForest)
library(gbm)
library(ROCR)
library(dplyr)
data <- read.csv("data/final_dataset_cleaned.csv")
setwd("~/GitHub/ML-final-project")
data <- read.csv("data/final_dataset_cleaned.csv")
# adjust DATE formatting
data$DATE <- as.POSIXct(data$DATE, format = "%m/%d/%Y")
# convert USREC columns to "Yes" or "No" factors
data <- data %>%
mutate_at(vars(USREC1, USREC3, USREC6, USREC12), ~factor(ifelse(. == 1, "Yes", "No")))
#implement a logistic regression as a benchmark method
logistic_data_12 <- glm(USREC12~ .-DATE -USREC -USREC1 -USREC3 -USREC6,data=data,family = "binomial")
summary(logistic_data_12)
logistic_data_6 <- glm(USREC6~ .-DATE -USREC -USREC1 -USREC3 -USREC12,data=data,family = "binomial")
summary(logistic_data_6)
logistic_data_3 <- glm(USREC3~ .-DATE -USREC -USREC1 -USREC6 -USREC12,data=data,family = "binomial")
summary(logistic_data_3)
logistic_data_1 <- glm(USREC1~ .-DATE -USREC -USREC3 -USREC6 -USREC12,data=data,family = "binomial")
summary(logistic_data_1)
# fit a decision tree on the data
set.seed(123)
tree.data_12 = tree(USREC12 ~.-DATE -USREC -USREC1 -USREC3 -USREC6, data = data)
cv.data_12 <- cv.tree(tree.data_12, FUN=prune.misclass, K=5)
best_size <- min(cv.data_12$size[cv.data_12$dev == min(cv.data_12$dev)])
best_tree12.cv = prune.misclass (tree.data_12, best=best_size)
plot(best_tree12.cv)
text(best_tree12.cv, pretty=0, col = "blue", cex = .5)
title("Best Tree of Size 11 for USREC12")
#---------------------------
#USREC12 Random Forest Model
# Create training and test datasets
index <- sample(1:nrow(data), 0.7 * nrow(data))
data_12.train <- data[index, ]
data_12.test <- data[-index, ]
#Boosted tree
boosted.tree.data12 <- gbm(USREC12~.-DATE -USREC -USREC1 -USREC3 -USREC6,
distribution = "gaussian", data = data_12.train,
n.trees = 1000, shrinkage = 0.01)
summary(boosted.tree.data12)
#Importance Score method
is.tree.data12 <- randomForest(USREC12~.-DATE -USREC -USREC1 -USREC3 -USREC6,
data=data_12.train, importance = TRUE)
print(is.tree.data12)
importance_scores <- importance(is.tree.data12)
ordered_variables <- importance_scores[order(importance_scores[, 1], decreasing = TRUE), , drop = FALSE]
print(ordered_variables)
#---------------------------
#USREC1 Random Forest Model
index <- sample(1:nrow(data), 0.7 * nrow(data))
data_1.train <- data[index, ]
data_1.test <- data[-index, ]
boosted.tree.data1 <- gbm(USREC1~.-DATE -USREC -USREC12 -USREC3 -USREC6,
distribution = "gaussian", data = data_1.train,
n.trees = 1000, shrinkage = 0.01)
summary(boosted.tree.data1)
#Importance Score method for USREC1
is.tree.data1 <- randomForest(USREC1~.-DATE -USREC -USREC12 -USREC3 -USREC6,
data=data_1.train, importance = TRUE)
print(is.tree.data1)
importance_scores <- importance(is.tree.data1)
ordered_variables <- importance_scores[order(importance_scores[, 1], decreasing = TRUE), , drop = FALSE]
print(ordered_variables)
#---------------------------
#USREC3 Random Forest Model
index <- sample(1:nrow(data), 0.7 * nrow(data))
data_3.train <- data[index, ]
data_3.test <- data[-index, ]
boosted.tree.data3 <- gbm(USREC3~.-DATE -USREC -USREC12 -USREC1 -USREC6,
distribution = "gaussian", data = data_3.train,
n.trees = 1000, shrinkage = 0.01)
summary(boosted.tree.data3)
#Importance Score method for USREC3
is.tree.data3 <- randomForest(USREC3~.-DATE -USREC -USREC12 -USREC1 -USREC6,
data=data_3.train, importance = TRUE)
print(is.tree.data3)
importance_scores <- importance(is.tree.data3)
ordered_variables <- importance_scores[order(importance_scores[, 1], decreasing = TRUE), , drop = FALSE]
print(ordered_variables)
#---------------------------
#USREC6 Random Forest Model
index <- sample(1:nrow(data), 0.7 * nrow(data))
data_6.train <- data[index, ]
data_6.test <- data[-index, ]
boosted.tree.data6 <- gbm(USREC6~.-DATE -USREC -USREC12 -USREC1 -USREC3,
distribution = "gaussian", data = data_6.train,
n.trees = 1000, shrinkage = 0.01)
summary(boosted.tree.data6)
#Importance Score method for USREC6
is.tree.data6 <- randomForest(USREC6~.-DATE -USREC -USREC12 -USREC1 -USREC3,
data=data_6.train, importance = TRUE)
print(is.tree.data6)
importance_scores <- importance(is.tree.data6)
ordered_variables <- importance_scores[order(importance_scores[, 1], decreasing = TRUE), , drop = FALSE]
print(ordered_variables)
head(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ISLR)
library(glmnet)
library(gbm)
library(ROCR)
library(class)
library(glmnet)
library(dplyr)
library(tidyr)
library(gbm)
data.raw <- read.csv("final_dataset_cleaned.csv")
setwd("~/GitHub/ML-final-project")
data.raw <- read.csv("final_dataset_cleaned.csv")
glimpse(data.raw)
data.raw <- read.csv("data/final_dataset_cleaned.csv")
glimpse(data.raw)
data.raw <- read.csv("data/final_dataset_cleaned.csv")
data.raw <- read.csv("data/final_dataset_cleaned.csv")
setwd("~/GitHub/ML-final-project/data")
data.raw <- read.csv("final_dataset_cleaned.csv")
data.raw <- read.csv("/final_dataset_cleaned.csv")
data.raw <- read.csv("\final_dataset_cleaned.csv")
